
Uart_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000f9c  08000f9c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa0  08000fa0  00001fb0  2**0
                  CONTENTS
  4 .ARM          00000008  08000fa0  08000fa0  00001fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000fa8  08000fb0  00001fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00001fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fac  08000fac  00001fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001fb0  2**0
                  CONTENTS
 10 .bss          00000034  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d80  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000068d  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000043f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012a  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c7d  00000000  00000000  000046ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c9e  00000000  00000000  0001c337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089762  00000000  00000000  0001dfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7737  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000058c  00000000  00000000  000a777c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000a7d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f84 	.word	0x08000f84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000f84 	.word	0x08000f84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:


const uint8_t TxBuffer[SIZE] = { 'T', 'E', 'S', 'T'};
uint8_t RxBuffer[SIZE];

int main(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/*Test code for USART2 */
	usart_base_obj.usart = USART2;
 80004bc:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <main+0x6c>)
 80004be:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <main+0x70>)
 80004c0:	601a      	str	r2, [r3, #0]
	usart_base_obj.TxBuffPtr = TxBuffer;
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <main+0x6c>)
 80004c4:	4a19      	ldr	r2, [pc, #100]	@ (800052c <main+0x74>)
 80004c6:	605a      	str	r2, [r3, #4]
	usart_base_obj.TxCounter = SIZE;
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <main+0x6c>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	721a      	strb	r2, [r3, #8]
	usart_base_obj.RxBuffPtr = RxBuffer;
 80004ce:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <main+0x6c>)
 80004d0:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <main+0x78>)
 80004d2:	60da      	str	r2, [r3, #12]
	usart_base_obj.RxCounter = SIZE;
 80004d4:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <main+0x6c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	741a      	strb	r2, [r3, #16]

	usart_periph_clock_init();
 80004da:	f000 f9e9 	bl	80008b0 <usart_periph_clock_init>

	usart_gpio_init(&usart_base_obj, GPIOA);
 80004de:	4915      	ldr	r1, [pc, #84]	@ (8000534 <main+0x7c>)
 80004e0:	4810      	ldr	r0, [pc, #64]	@ (8000524 <main+0x6c>)
 80004e2:	f000 fa77 	bl	80009d4 <usart_gpio_init>

	usart_config_function(&usart_base_obj);
 80004e6:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x6c>)
 80004e8:	f000 fad4 	bl	8000a94 <usart_config_function>

	usart_interrupt_config(&usart_base_obj);
 80004ec:	480d      	ldr	r0, [pc, #52]	@ (8000524 <main+0x6c>)
 80004ee:	f000 fb41 	bl	8000b74 <usart_interrupt_config>

	DMAx_interrupt_config(DMA1_Stream6);
 80004f2:	4811      	ldr	r0, [pc, #68]	@ (8000538 <main+0x80>)
 80004f4:	f000 fb22 	bl	8000b3c <DMAx_interrupt_config>

	DMAx_interrupt_config(DMA1_Stream5);
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <main+0x84>)
 80004fa:	f000 fb1f 	bl	8000b3c <DMAx_interrupt_config>

	global_interrupt_enable(USART2_IRQn, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2026      	movs	r0, #38	@ 0x26
 8000502:	f000 fb65 	bl	8000bd0 <global_interrupt_enable>

	global_interrupt_enable(DMA1_Stream6_IRQn, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2011      	movs	r0, #17
 800050a:	f000 fb61 	bl	8000bd0 <global_interrupt_enable>

	global_interrupt_enable(DMA1_Stream5_IRQn, 0);
 800050e:	2100      	movs	r1, #0
 8000510:	2010      	movs	r0, #16
 8000512:	f000 fb5d 	bl	8000bd0 <global_interrupt_enable>

	stream_config_for_dma_transmit(DMA1_Stream6, TxBuffer, 5);
 8000516:	2205      	movs	r2, #5
 8000518:	4904      	ldr	r1, [pc, #16]	@ (800052c <main+0x74>)
 800051a:	4807      	ldr	r0, [pc, #28]	@ (8000538 <main+0x80>)
 800051c:	f000 f982 	bl	8000824 <stream_config_for_dma_transmit>


	while (1) {	
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x68>
 8000524:	2000001c 	.word	0x2000001c
 8000528:	40004400 	.word	0x40004400
 800052c:	08000f9c 	.word	0x08000f9c
 8000530:	20000030 	.word	0x20000030
 8000534:	40020000 	.word	0x40020000
 8000538:	400260a0 	.word	0x400260a0
 800053c:	40026088 	.word	0x40026088

08000540 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

   while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <NMI_Handler+0x4>

08000548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <MemManage_Handler+0x4>

08000558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <UsageFault_Handler+0x4>

08000568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SysTick_IRQn 0 */
	_usart_IRQHandler(&usart_base_obj);
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <USART2_IRQHandler+0x10>)
 80005a6:	f000 f99f 	bl	80008e8 <_usart_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  _DMA1_Stream5_IRQHandler(&usart_base_obj, DMA1);
 80005b8:	4902      	ldr	r1, [pc, #8]	@ (80005c4 <DMA1_Stream5_IRQHandler+0x10>)
 80005ba:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <DMA1_Stream5_IRQHandler+0x14>)
 80005bc:	f000 f8af 	bl	800071e <_DMA1_Stream5_IRQHandler>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40026000 	.word	0x40026000
 80005c8:	2000001c 	.word	0x2000001c

080005cc <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  
  _DMA1_Stream6_IRQHandler(&usart_base_obj, DMA1);
 80005d0:	4902      	ldr	r1, [pc, #8]	@ (80005dc <DMA1_Stream6_IRQHandler+0x10>)
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <DMA1_Stream6_IRQHandler+0x14>)
 80005d4:	f000 f860 	bl	8000698 <_DMA1_Stream6_IRQHandler>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40026000 	.word	0x40026000
 80005e0:	2000001c 	.word	0x2000001c

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <SystemInit+0x20>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ee:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <SystemInit+0x20>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db0b      	blt.n	8000632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 021f 	and.w	r2, r3, #31
 8000620:	4907      	ldr	r1, [pc, #28]	@ (8000640 <__NVIC_EnableIRQ+0x38>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	2001      	movs	r0, #1
 800062a:	fa00 f202 	lsl.w	r2, r0, r2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e100 	.word	0xe000e100

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	@ (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	@ (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <_DMA1_Stream6_IRQHandler>:
 * Date............: 11-July-2024 19:27
 * Function........: _DMA1_Stream6_IRQHandler
 * .................
 */

void _DMA1_Stream6_IRQHandler(usart_handle* usart_p, DMA_TypeDef* DMAx){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	 
	/* A transfer complete event occurred on*/
	if(DMAx->HISR & DMA_TCIF6)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d018      	beq.n	80006e0 <_DMA1_Stream6_IRQHandler+0x48>
	{
		/*clear transfer complete flag*/
		DMAx->HIFCR |= DMA_CTCIF6;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	60da      	str	r2, [r3, #12]

		if(USART_IS_TC(usart_p->usart))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c4:	2b40      	cmp	r3, #64	@ 0x40
 80006c6:	d124      	bne.n	8000712 <_DMA1_Stream6_IRQHandler+0x7a>
		{
			usart_p->usart->SR &= ~SR_TC;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80006d6:	601a      	str	r2, [r3, #0]
			usart_p->state = TX_READY;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2202      	movs	r2, #2
 80006dc:	749a      	strb	r2, [r3, #18]
	{
		/* Clear the flag*/
		DMAx->HIFCR |= (DMA_DMEIF6);
	}

}
 80006de:	e018      	b.n	8000712 <_DMA1_Stream6_IRQHandler+0x7a>
	else if(DMAx->HISR & DMA_TEIF6)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d006      	beq.n	80006fa <_DMA1_Stream6_IRQHandler+0x62>
		DMAx->HIFCR |= (DMA_TEIF6);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60da      	str	r2, [r3, #12]
}
 80006f8:	e00b      	b.n	8000712 <_DMA1_Stream6_IRQHandler+0x7a>
	else if(DMAx->HISR & DMA_DMEIF6)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d005      	beq.n	8000712 <_DMA1_Stream6_IRQHandler+0x7a>
		DMAx->HIFCR |= (DMA_DMEIF6);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	60da      	str	r2, [r3, #12]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_DMA1_Stream5_IRQHandler>:
 * Date............: 12-July-2024 15:37
 * Function........: _DMA1_Stream5_IRQHandler
 * ................. 
 */

void _DMA1_Stream5_IRQHandler(usart_handle* usart_p, DMA_TypeDef* DMAx){
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
	 /*Stream 5 transfer complete interrupt flag*/

	if(DMAx-> HISR & DMA_TCIF5)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <_DMA1_Stream5_IRQHandler+0x24>
	{
		DMAx->HIFCR |= DMA_CTCIF5; /*clear flag*/
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	60da      	str	r2, [r3, #12]
	{
		/* Clear the flag*/
		DMAx->HIFCR |= (DMA_DMEIF5);
	}
		
}
 8000740:	e018      	b.n	8000774 <_DMA1_Stream5_IRQHandler+0x56>
	else if(DMAx->HISR & DMA_TEIF5)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <_DMA1_Stream5_IRQHandler+0x3e>
		DMAx->HIFCR |= (DMA_TEIF5);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	60da      	str	r2, [r3, #12]
}
 800075a:	e00b      	b.n	8000774 <_DMA1_Stream5_IRQHandler+0x56>
	else if(DMAx->HISR & DMA_DMEIF5)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <_DMA1_Stream5_IRQHandler+0x56>
		DMAx->HIFCR |= (DMA_DMEIF5);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	60da      	str	r2, [r3, #12]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <disable_dma_stream>:
 * Date............: 10-July-2024 17:20
 * Function........: disable_dma_stream
 * ................. 
 */

usart_states disable_dma_stream(DMA_Stream_TypeDef* DMA1_StreamX, stream_names stream){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	if(TX_STREAM6_CHANNEL4 == stream){
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10e      	bne.n	80007b0 <disable_dma_stream+0x30>
	/*To configure stream, first you have to disable.So, reset stream EN bits*/
		DMA1_StreamX->CR &= ~DMA_CR_EN;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f023 0201 	bic.w	r2, r3, #1
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
		/*check the stream status bit is really disabled if it is enable, get error*/
		while(DMA1_StreamX->CR & DMA_CR_EN )
 800079e:	bf00      	nop
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f9      	bne.n	80007a0 <disable_dma_stream+0x20>
						;
	return USART_OK;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e012      	b.n	80007d6 <disable_dma_stream+0x56>
	}
	
	else if(RX_STREAM5_CHANNEL4 == stream){
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d10e      	bne.n	80007d4 <disable_dma_stream+0x54>
	/*To configure stream, first you have to disable.So, reset stream EN bits*/
		DMA1_StreamX->CR &= ~DMA_CR_EN;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f023 0201 	bic.w	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
		/*check the stream status bit is really disabled if it is enable, get error*/
		while(DMA1_StreamX->CR & DMA_CR_EN )
 80007c2:	bf00      	nop
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f9      	bne.n	80007c4 <disable_dma_stream+0x44>
						;
	return USART_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e000      	b.n	80007d6 <disable_dma_stream+0x56>
	}

	else{
		return USART_ERROR;
 80007d4:	2301      	movs	r3, #1
	}
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <enable_dma_stream>:
 * Date............: 10-July-2024 17:32
 * Function........: enable_dma_stream
 * ................. 
 */

void enable_dma_stream(DMA_Stream_TypeDef* DMA1_StreamX, stream_names stream){
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
	if(TX_STREAM6_CHANNEL4 == stream){
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d106      	bne.n	8000802 <enable_dma_stream+0x20>
		/*Activate the stream by setting EN bit*/
		DMA1_StreamX->CR |= DMA_CR_EN;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f043 0201 	orr.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e00a      	b.n	8000818 <enable_dma_stream+0x36>
	}else if(RX_STREAM5_CHANNEL4 == stream){
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d106      	bne.n	8000816 <enable_dma_stream+0x34>
		/*Activate the stream by setting EN bit*/
		DMA1_StreamX->CR |= DMA_CR_EN;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f043 0201 	orr.w	r2, r3, #1
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e000      	b.n	8000818 <enable_dma_stream+0x36>
	}else{
		return;
 8000816:	bf00      	nop
	}

}
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <stream_config_for_dma_transmit>:
 * Date............: 09-July-2024 16:20
 * Function........: stream_config_for_usart_to_dma
 * ................. 
 */

void stream_config_for_dma_transmit(DMA_Stream_TypeDef* DMA1_StreamX , const uint8_t* BufferPtr, uint32_t length){
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]

	/* To configure the stream, first, close the stream channel */	
	usart_states ret_state;
	ret_state = disable_dma_stream(DMA1_StreamX,TX_STREAM6_CHANNEL4);
 8000830:	2100      	movs	r1, #0
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ffa4 	bl	8000780 <disable_dma_stream>
 8000838:	4603      	mov	r3, r0
 800083a:	75fb      	strb	r3, [r7, #23]
	if(USART_OK != ret_state)
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d12f      	bne.n	80008a2 <stream_config_for_dma_transmit+0x7e>
		return;

	/* Select Direct Mode */
	DMA1_StreamX->CR &= ~DMA_FCR_DMDIS;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f023 0204 	bic.w	r2, r3, #4
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	601a      	str	r2, [r3, #0]

	/*Set Data direction to Peripheral to memory*/
	DMA1_StreamX->CR &= ~SxCR_DIR_MASK;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	601a      	str	r2, [r3, #0]
	/*Set Data direction to Peripheral to memory !!request diir*/
	DMA1_StreamX->CR |= SxCR_PERIPH_TO_MEMORY;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]

	/* Set the peripheral port register address(USART2_DR) */	
	DMA1_StreamX-> PAR = USART2_DATA_REG_ADDRESS;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <stream_config_for_dma_transmit+0x88>)
 8000866:	609a      	str	r2, [r3, #8]
	
	/* Set the memory port register address */	
	DMA1_StreamX-> M0AR = (uint32_t)BufferPtr;
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	60da      	str	r2, [r3, #12]

	/* Set number of data items to transfer & this value is decremented by authomatically.*/
	DMA1_StreamX->NDTR = length;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	605a      	str	r2, [r3, #4]

	/* Select the Channel for (Usart2_Tx) */
	DMA1_StreamX->CR |= DMA_CHANNEL_4;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]

	/* Select Configure the stream priority */
	DMA1_StreamX->CR |= DMA_CHANNEL_4_MEDIUM_PRIORITY;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]

	/*Stream6 Transfer complete interrupt enable*/
	DMA1_StreamX->CR |= DMA_SxCR_TCIE;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f043 0210 	orr.w	r2, r3, #16
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	601a      	str	r2, [r3, #0]
	
	/* Enable the stream again */
	enable_dma_stream(DMA1_StreamX,TX_STREAM6_CHANNEL4);
 8000898:	2100      	movs	r1, #0
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ffa1 	bl	80007e2 <enable_dma_stream>
 80008a0:	e000      	b.n	80008a4 <stream_config_for_dma_transmit+0x80>
		return;
 80008a2:	bf00      	nop
	
}
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004404 	.word	0x40004404

080008b0 <usart_periph_clock_init>:
 * Date............: 09-July-2024 16:12
 * Function........: usart_periph_clock_init
 * ................. 
 */

void usart_periph_clock_init(){
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	/* Set RCC Clock for GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b8:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set RCC Clock for USART2 */
	RCC->APB1ENR |= USART2EN;
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ca:	6413      	str	r3, [r2, #64]	@ 0x40
	
	/*Set RCC clock for DMA*/
	RCC->AHB1ENR |= DMA1EN;
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <usart_periph_clock_init+0x34>)
 80008d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30

}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <_usart_IRQHandler>:
 * Date............: 05-July-2024 11:36
 * Function........: _usart_IRQHandler
 * ................. 
 */

void _usart_IRQHandler(usart_handle* usart_p) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	if(usart_p == NULL)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d067      	beq.n	80009c6 <_usart_IRQHandler+0xde>
		return;	
	/*Check  Transmit Data Register Empty and TXEIE Interrupt Enable*/
	if ((USART_IS_TXE(usart_p->usart)) && USART_IS_TXEIE(usart_p->usart))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000900:	2b80      	cmp	r3, #128	@ 0x80
 8000902:	d10d      	bne.n	8000920 <_usart_IRQHandler+0x38>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	2b80      	cmp	r3, #128	@ 0x80
 8000910:	d106      	bne.n	8000920 <_usart_IRQHandler+0x38>
	{
		usart_p->state = TX_READY;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2202      	movs	r2, #2
 8000916:	749a      	strb	r2, [r3, #18]
		usart_transmit_it(usart_p);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f96e 	bl	8000bfa <usart_transmit_it>
 800091e:	e053      	b.n	80009c8 <_usart_IRQHandler+0xe0>
	}
	else if (USART_IS_RXNE(usart_p->usart) && USART_IS_RXNEIE(usart_p->usart))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	2b20      	cmp	r3, #32
 800092c:	d10d      	bne.n	800094a <_usart_IRQHandler+0x62>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	2b20      	cmp	r3, #32
 800093a:	d106      	bne.n	800094a <_usart_IRQHandler+0x62>
	{
		usart_p->state = RX_READY;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2203      	movs	r2, #3
 8000940:	749a      	strb	r2, [r3, #18]
		usart_receive_it(usart_p);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f999 	bl	8000c7a <usart_receive_it>
 8000948:	e03e      	b.n	80009c8 <_usart_IRQHandler+0xe0>
	}
	else if(USART_IS_TC(usart_p->usart))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000954:	2b40      	cmp	r3, #64	@ 0x40
 8000956:	d117      	bne.n	8000988 <_usart_IRQHandler+0xa0>
	{
		if(DMA1->HISR & DMA_TCIF6)
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <_usart_IRQHandler+0x88>
		{
			DMA1->HIFCR |= DMA_CTCIF6; /*clear flag*/
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 800096a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096e:	60d3      	str	r3, [r2, #12]
		}
		usart_p->usart->SR &= ~SR_TC;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800097e:	601a      	str	r2, [r3, #0]
		usart_p->state = TX_READY; 
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2202      	movs	r2, #2
 8000984:	749a      	strb	r2, [r3, #18]
 8000986:	e01f      	b.n	80009c8 <_usart_IRQHandler+0xe0>
	}else if(USART_IS_RXNE(usart_p->usart))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	2b20      	cmp	r3, #32
 8000994:	d118      	bne.n	80009c8 <_usart_IRQHandler+0xe0>
	{
		if(DMA1->HIFCR & DMA_TCIF5)
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <_usart_IRQHandler+0xc6>
		{
			DMA1->HIFCR |= DMA_CTCIF5; /*clear flag*/
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <_usart_IRQHandler+0xe8>)
 80009a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ac:	60d3      	str	r3, [r2, #12]
		}
		usart_p->usart->CR3 &= ~(DMAR); /*Clear reset bit*/
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009bc:	615a      	str	r2, [r3, #20]
		usart_p->state = RX_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2203      	movs	r2, #3
 80009c2:	749a      	strb	r2, [r3, #18]
 80009c4:	e000      	b.n	80009c8 <_usart_IRQHandler+0xe0>
		return;	
 80009c6:	bf00      	nop
	}else
	{
		/*....*/;
	}
}
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40026000 	.word	0x40026000

080009d4 <usart_gpio_init>:
 * Date............: 24-June-2024 01:15
 * Function........: usart_gpio_init
 * ................. 
 */

void usart_gpio_init(usart_handle* usart_base_p, GPIO_TypeDef * GPIOx){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	if(usart_base_p == NULL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d050      	beq.n	8000a86 <usart_gpio_init+0xb2>
		return;
	/* Set Rx pin's (PA3) as Alternate Function */
	GPIOx->MODER |= (1U << 7);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]
	GPIOx->MODER &= ~(1U << 6);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]

	/* Set Tx pin's (PA2) as Alternate Function */
	GPIOx->MODER |= (1U << 5);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f043 0220 	orr.w	r2, r3, #32
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	601a      	str	r2, [r3, #0]
	GPIOx->MODER &= ~(1U << 4);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0210 	bic.w	r2, r3, #16
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	601a      	str	r2, [r3, #0]

	/* Set Tx pin's (PA2) as Alternate Function Low Register. AF7 0 1 1 1  */
	GPIOx->AFR[0] |= (1U << 8);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] |= (1U << 9);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] |= (1U << 10);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] &= ~(1U << 11);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	621a      	str	r2, [r3, #32]

	/* Set Rx pin's (PA3) as Alternate Function Low Register. AF7 0 1 1 1  */
	GPIOx->AFR[0] |= (1U << 12);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] |= (1U << 13);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] |= (1U << 14);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	621a      	str	r2, [r3, #32]
	GPIOx->AFR[0] &= ~(1U << 15);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	621a      	str	r2, [r3, #32]

	/* Enable the USART Module */
	usart_base_p->usart->CR1 |= CR1_UE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	e000      	b.n	8000a88 <usart_gpio_init+0xb4>
		return;
 8000a86:	bf00      	nop
}
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <usart_config_function>:
 * Date............: 08-July-2024 13:12
 * Function........: usart_config_function
 * ................. 
 */

void usart_config_function(usart_handle* usart_base_p){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(usart_base_p == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d046      	beq.n	8000b30 <usart_config_function+0x9c>
		return;	
	usart_base_p->usart->CR1 &= ~CR1_MBIT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ab0:	60da      	str	r2, [r3, #12]

	usart_base_p->usart->CR2 &= ~CR2_STOP_BIT;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000ac0:	611a      	str	r2, [r3, #16]

	/*OVER SAMPLE*/
	usart_base_p->usart->CR1 &= ~CR1_OVER8;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ad0:	60da      	str	r2, [r3, #12]

	/* Set USART Baud rate 115200 MHz */
	usart_set_baudrate(usart_base_p->usart, APB1_CLK, UART_BAUDRATE_115200);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ada:	4917      	ldr	r1, [pc, #92]	@ (8000b38 <usart_config_function+0xa4>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f903 	bl	8000ce8 <usart_set_baudrate>

	/* Configure The Transfer Direction TE: Transmitter Enable */
	usart_base_p->usart->CR1 |= CR1_TE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0208 	orr.w	r2, r2, #8
 8000af0:	60da      	str	r2, [r3, #12]

	/* Bit 2 RE: Receiver enable */
	usart_base_p->usart->CR1 |= CR1_RE;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0204 	orr.w	r2, r2, #4
 8000b00:	60da      	str	r2, [r3, #12]

	usart_base_p->state = TX_READY;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2202      	movs	r2, #2
 8000b06:	749a      	strb	r2, [r3, #18]
	usart_base_p->state = RX_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	749a      	strb	r2, [r3, #18]

	/*Enable DMA Transmit Mode*/
	usart_base_p->usart->CR3 |= DMAT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b1c:	615a      	str	r2, [r3, #20]

	/*DMA enable receiver*/
	usart_base_p->usart->CR3 |= DMAR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	e000      	b.n	8000b32 <usart_config_function+0x9e>
		return;	
 8000b30:	bf00      	nop
}
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	00f42400 	.word	0x00f42400

08000b3c <DMAx_interrupt_config>:
/*
 * Date............: 24-July-2024 19:23
 * Function........: DMAx_interrupt_config
 * .................
 */
void DMAx_interrupt_config(DMA_Stream_TypeDef* DMA1_StreamX){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	/* Set DMAx Transfer complete interrupt enable */
	DMA1_StreamX->CR |= (DMA_TCIE);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f043 0210 	orr.w	r2, r3, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]

	/* Set DMAx Direct mode error interrupt enable */
	DMA1_StreamX->CR |= (DMA_DMEIE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* Set DMA Transfer error interrupt enable */
	DMA1_StreamX->CR |= (DMA_TEIE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f043 0204 	orr.w	r2, r3, #4
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <usart_interrupt_config>:
 * Date............: 08-July-2024 11:05
 * Function........: usart_interrupt_config
 * ................. 
 */

void usart_interrupt_config(usart_handle* usart_base_p){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(usart_base_p == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d020      	beq.n	8000bc4 <usart_interrupt_config+0x50>
		return;		
	/*CTSIE: CTS interrupt enable*/
	usart_base_p->usart->CR3 |= CR3_CTSIE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b90:	615a      	str	r2, [r3, #20]

	/* TCIE: Transmission complete interrupt enable */
	usart_base_p->usart->CR1 |= CR1_TCIE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ba0:	60da      	str	r2, [r3, #12]

	/* Set TXE interrupt flag */
	usart_base_p->usart->CR1 |= CR1_TXEIE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bb0:	60da      	str	r2, [r3, #12]

	/*Set RXNE interrupt flag */
	usart_base_p->usart->CR1 |= CR1_RXNEIE;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0220 	orr.w	r2, r2, #32
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	e000      	b.n	8000bc6 <usart_interrupt_config+0x52>
		return;		
 8000bc4:	bf00      	nop

}
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <global_interrupt_enable>:
 * Date............: 08-July-2024 09:12
 * Function........: global_interrupt_enable
 * ................. 
 */

void global_interrupt_enable(IRQn_Type irq_num, uint32_t priority){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
	/*Enable software event register*/
	EXTI->SWIER |= EXTI_IMR_MR2;
	EXTI->SWIER |= EXTI_IMR_MR3;
#endif
//#if  NVIC_PERIHP_INTERRUPT
	NVIC_SetPriority(irq_num, priority);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fd2e 	bl	8000644 <__NVIC_SetPriority>
	NVIC_EnableIRQ(irq_num);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fd0b 	bl	8000608 <__NVIC_EnableIRQ>
//#endif
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <usart_transmit_it>:
 * Date............: 04-July-2024 12:22
 * Function........: usart_transmit_it
 * ................. 
 */

void usart_transmit_it(usart_handle* usart_p) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	if(usart_p == NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d030      	beq.n	8000c6a <usart_transmit_it+0x70>
		return;		

	if(usart_p->state != TX_READY) 
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7c9b      	ldrb	r3, [r3, #18]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d12e      	bne.n	8000c6e <usart_transmit_it+0x74>
		return ;

	const uint8_t *tmp = usart_p->TxBuffPtr;		//" read only " access to read  
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	60fb      	str	r3, [r7, #12]
	usart_p->usart->DR = (*tmp & 0xFF);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
	usart_p->TxBuffPtr++;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]

	usart_p->TxCounter--;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7a1b      	ldrb	r3, [r3, #8]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	721a      	strb	r2, [r3, #8]

	/* Check Whether The Transmission End Or Not */
	if (usart_p->TxCounter == 0U)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7a1b      	ldrb	r3, [r3, #8]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10f      	bne.n	8000c62 <usart_transmit_it+0x68>
	{
		/* Set Transmission Complete Interrupt bit And Clear TXE Interupt*/
		usart_p->usart->CR1 |= CR1_TCIE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c50:	60da      	str	r2, [r3, #12]
		usart_p->usart->CR1 &= ~CR1_TXEIE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c60:	60da      	str	r2, [r3, #12]
	}

	usart_p->state = RX_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2203      	movs	r2, #3
 8000c66:	749a      	strb	r2, [r3, #18]
 8000c68:	e002      	b.n	8000c70 <usart_transmit_it+0x76>
		return;		
 8000c6a:	bf00      	nop
 8000c6c:	e000      	b.n	8000c70 <usart_transmit_it+0x76>
		return ;
 8000c6e:	bf00      	nop

}
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <usart_receive_it>:
 * Date............: 04-July-20204 13:52
 * Function........: usart_receive_it
 * ................. 
 */

void usart_receive_it(usart_handle* usart_p) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	if(usart_p == NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d027      	beq.n	8000cd8 <usart_receive_it+0x5e>
		return;

	if(usart_p->state != RX_READY) 
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7c9b      	ldrb	r3, [r3, #18]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d125      	bne.n	8000cdc <usart_receive_it+0x62>
		return;

	uint8_t *receive_tmp = usart_p->RxBuffPtr;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60fb      	str	r3, [r7, #12]

	*(uint8_t*) receive_tmp = (usart_p->usart->DR & (0xFF));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	701a      	strb	r2, [r3, #0]
	++usart_p->RxBuffPtr;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]

	/* Clear the RXNE bits.*/
	if (--usart_p->RxCounter == 0U)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7c1b      	ldrb	r3, [r3, #16]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	7411      	strb	r1, [r2, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d107      	bne.n	8000cd0 <usart_receive_it+0x56>
		usart_p->usart->SR &= ~SR_RXNE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0220 	bic.w	r2, r2, #32
 8000cce:	601a      	str	r2, [r3, #0]

	usart_p->state = TX_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	749a      	strb	r2, [r3, #18]
 8000cd6:	e002      	b.n	8000cde <usart_receive_it+0x64>
		return;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <usart_receive_it+0x64>
		return;
 8000cdc:	bf00      	nop
}
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <usart_set_baudrate>:
 * Date............: 24-June-2024 01:42
 * Function........: uart_set_baudrate
 * ................. 
 */

void usart_set_baudrate(USART_TypeDef* usart_p, uint32_t PeriphClk, uint32_t BaudRate) {
 8000ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cec:	b09c      	sub	sp, #112	@ 0x70
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8000cf2:	66b9      	str	r1, [r7, #104]	@ 0x68
 8000cf4:	667a      	str	r2, [r7, #100]	@ 0x64
	if(usart_p == NULL)
 8000cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80ed 	beq.w	8000ed8 <usart_set_baudrate+0x1f0>
		return;	

	usart_p->BRR =
			(uint16_t) ((((((uint32_t) ((((uint64_t) (((PeriphClk)))) * 25)
 8000cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d00:	2200      	movs	r2, #0
 8000d02:	4698      	mov	r8, r3
 8000d04:	4691      	mov	r9, r2
 8000d06:	4642      	mov	r2, r8
 8000d08:	464b      	mov	r3, r9
 8000d0a:	1891      	adds	r1, r2, r2
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	415b      	adcs	r3, r3
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d16:	eb12 0408 	adds.w	r4, r2, r8
 8000d1a:	eb43 0509 	adc.w	r5, r3, r9
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	00eb      	lsls	r3, r5, #3
 8000d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d2c:	00e2      	lsls	r2, r4, #3
 8000d2e:	4614      	mov	r4, r2
 8000d30:	461d      	mov	r5, r3
 8000d32:	eb14 0308 	adds.w	r3, r4, r8
 8000d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d38:	eb45 0309 	adc.w	r3, r5, r9
 8000d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					/ (4 * ((uint64_t) (((BaudRate))))))) / 100) << 4)
 8000d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d40:	2200      	movs	r2, #0
 8000d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d44:	657a      	str	r2, [r7, #84]	@ 0x54
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000d52:	4629      	mov	r1, r5
 8000d54:	008b      	lsls	r3, r1, #2
 8000d56:	4621      	mov	r1, r4
 8000d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	008a      	lsls	r2, r1, #2
 8000d60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000d64:	f7ff fa30 	bl	80001c8 <__aeabi_uldivmod>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee4 <usart_set_baudrate+0x1fc>)
 8000d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	b29c      	uxth	r4, r3
					+ (((((((uint32_t) ((((uint64_t) (((PeriphClk)))) * 25)
							/ (4 * ((uint64_t) (((BaudRate)))))))
							- ((((uint32_t) ((((uint64_t) ((((PeriphClk)))))
 8000d7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d80:	64fa      	str	r2, [r7, #76]	@ 0x4c
									* 25) / (4 * ((uint64_t) ((((BaudRate))))))))
 8000d82:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000d86:	4642      	mov	r2, r8
 8000d88:	464b      	mov	r3, r9
 8000d8a:	1891      	adds	r1, r2, r2
 8000d8c:	6139      	str	r1, [r7, #16]
 8000d8e:	415b      	adcs	r3, r3
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d96:	4641      	mov	r1, r8
 8000d98:	eb12 0a01 	adds.w	sl, r2, r1
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	eb43 0b01 	adc.w	fp, r3, r1
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000dae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000db6:	4692      	mov	sl, r2
 8000db8:	469b      	mov	fp, r3
 8000dba:	4643      	mov	r3, r8
 8000dbc:	eb1a 0303 	adds.w	r3, sl, r3
 8000dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8000dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8000dde:	4649      	mov	r1, r9
 8000de0:	008b      	lsls	r3, r1, #2
 8000de2:	4641      	mov	r1, r8
 8000de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000de8:	4641      	mov	r1, r8
 8000dea:	008a      	lsls	r2, r1, #2
 8000dec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000df0:	f7ff f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
							- ((((uint32_t) ((((uint64_t) ((((PeriphClk)))))
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <usart_set_baudrate+0x1fc>)
 8000dfc:	fba3 2301 	umull	r2, r3, r3, r1
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	2264      	movs	r2, #100	@ 0x64
 8000e04:	fb02 f303 	mul.w	r3, r2, r3
 8000e08:	1acb      	subs	r3, r1, r3
									/ 100) * 100)) * 16)\
 8000e0a:	011b      	lsls	r3, r3, #4
 + 50) / 100) & 0xF0))
 8000e0c:	3332      	adds	r3, #50	@ 0x32
 8000e0e:	4a35      	ldr	r2, [pc, #212]	@ (8000ee4 <usart_set_baudrate+0x1fc>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	095b      	lsrs	r3, r3, #5
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e1c:	b29b      	uxth	r3, r3
					+ (((((((uint32_t) ((((uint64_t) (((PeriphClk)))) * 25)
 8000e1e:	4423      	add	r3, r4
 8000e20:	b29c      	uxth	r4, r3
					+ (((((((uint32_t) ((((uint64_t) (((PeriphClk)))) * 25)
							/ (4 * ((uint64_t) (((BaudRate)))))))
							- ((((uint32_t) ((((uint64_t) ((((PeriphClk)))))
 8000e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e24:	2200      	movs	r2, #0
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e28:	637a      	str	r2, [r7, #52]	@ 0x34
									* 25) / (4 * ((uint64_t) ((((BaudRate))))))))
 8000e2a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8000e2e:	4642      	mov	r2, r8
 8000e30:	464b      	mov	r3, r9
 8000e32:	1891      	adds	r1, r2, r2
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	415b      	adcs	r3, r3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e3e:	4641      	mov	r1, r8
 8000e40:	1851      	adds	r1, r2, r1
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	4649      	mov	r1, r9
 8000e46:	414b      	adcs	r3, r1
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000e56:	4659      	mov	r1, fp
 8000e58:	00cb      	lsls	r3, r1, #3
 8000e5a:	4651      	mov	r1, sl
 8000e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e60:	4651      	mov	r1, sl
 8000e62:	00ca      	lsls	r2, r1, #3
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4642      	mov	r2, r8
 8000e6c:	189b      	adds	r3, r3, r2
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e70:	464b      	mov	r3, r9
 8000e72:	460a      	mov	r2, r1
 8000e74:	eb42 0303 	adc.w	r3, r2, r3
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000e8e:	4649      	mov	r1, r9
 8000e90:	008b      	lsls	r3, r1, #2
 8000e92:	4641      	mov	r1, r8
 8000e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e98:	4641      	mov	r1, r8
 8000e9a:	008a      	lsls	r2, r1, #2
 8000e9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000ea0:	f7ff f992 	bl	80001c8 <__aeabi_uldivmod>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
							- ((((uint32_t) ((((uint64_t) ((((PeriphClk)))))
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <usart_set_baudrate+0x1fc>)
 8000eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2164      	movs	r1, #100	@ 0x64
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	1ad3      	subs	r3, r2, r3
									/ 100) * 100)) * 16)\
 8000eb8:	011b      	lsls	r3, r3, #4
 + 50) / 100) & 0x0F));
 8000eba:	3332      	adds	r3, #50	@ 0x32
 8000ebc:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <usart_set_baudrate+0x1fc>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	b29b      	uxth	r3, r3
			(uint16_t) ((((((uint32_t) ((((uint64_t) (((PeriphClk)))) * 25)
 8000ecc:	4423      	add	r3, r4
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
	usart_p->BRR =
 8000ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	e000      	b.n	8000eda <usart_set_baudrate+0x1f2>
		return;	
 8000ed8:	bf00      	nop

}
 8000eda:	3770      	adds	r7, #112	@ 0x70
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ee2:	bf00      	nop
 8000ee4:	51eb851f 	.word	0x51eb851f

08000ee8 <Reset_Handler>:
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f20 <LoopFillZerobss+0xe>
 8000eec:	f7ff fb7a 	bl	80005e4 <SystemInit>
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <LoopFillZerobss+0x12>)
 8000ef2:	490d      	ldr	r1, [pc, #52]	@ (8000f28 <LoopFillZerobss+0x16>)
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x1a>)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:
 8000efa:	58d4      	ldr	r4, [r2, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:
 8000f00:	18c4      	adds	r4, r0, r3
 8000f02:	428c      	cmp	r4, r1
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <LoopFillZerobss+0x1e>)
 8000f08:	4c0a      	ldr	r4, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x22>)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:
 8000f12:	42a2      	cmp	r2, r4
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>
 8000f16:	f000 f811 	bl	8000f3c <__libc_init_array>
 8000f1a:	f7ff facd 	bl	80004b8 <main>
 8000f1e:	4770      	bx	lr
 8000f20:	20020000 	.word	0x20020000
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	08000fb0 	.word	0x08000fb0
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000034 	.word	0x20000034

08000f38 <ADC_IRQHandler>:
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <__libc_init_array>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000f74 <__libc_init_array+0x38>)
 8000f40:	4c0d      	ldr	r4, [pc, #52]	@ (8000f78 <__libc_init_array+0x3c>)
 8000f42:	1b64      	subs	r4, r4, r5
 8000f44:	10a4      	asrs	r4, r4, #2
 8000f46:	2600      	movs	r6, #0
 8000f48:	42a6      	cmp	r6, r4
 8000f4a:	d109      	bne.n	8000f60 <__libc_init_array+0x24>
 8000f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000f7c <__libc_init_array+0x40>)
 8000f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000f80 <__libc_init_array+0x44>)
 8000f50:	f000 f818 	bl	8000f84 <_init>
 8000f54:	1b64      	subs	r4, r4, r5
 8000f56:	10a4      	asrs	r4, r4, #2
 8000f58:	2600      	movs	r6, #0
 8000f5a:	42a6      	cmp	r6, r4
 8000f5c:	d105      	bne.n	8000f6a <__libc_init_array+0x2e>
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f64:	4798      	blx	r3
 8000f66:	3601      	adds	r6, #1
 8000f68:	e7ee      	b.n	8000f48 <__libc_init_array+0xc>
 8000f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f6e:	4798      	blx	r3
 8000f70:	3601      	adds	r6, #1
 8000f72:	e7f2      	b.n	8000f5a <__libc_init_array+0x1e>
 8000f74:	08000fa8 	.word	0x08000fa8
 8000f78:	08000fa8 	.word	0x08000fa8
 8000f7c:	08000fa8 	.word	0x08000fa8
 8000f80:	08000fac 	.word	0x08000fac

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
